#! /usr/bin/env python3

import sys
import itertools
import collections
from typing import Dict, Tuple, Sequence, Any

Histogram = Dict[bytes, float]

ASCII_RANGE = range(0, 128)


def sliding_window(items: Sequence, size: int) -> Sequence:
    return [items[start:end] for start, end
            in zip(range(0, len(items) - size), range(size, len(items)))]


def analyze(filename: str, max_ngram_size: int) -> Sequence[Histogram]:
    def count_ngrams(ngrams: Sequence[bytes], keys: Sequence[bytes]) -> Histogram:
        raw_histogram = collections.Counter(ngrams)
        # Additive smoothing for vertical asymptotes at zeros for chi function
        histogram = {key: raw_histogram[key] + 1 for key in keys}
        histogram_size = sum(histogram.values())
        return {key: val / histogram_size for key, val in histogram.items()}

    def ngram_range(ngram_size: int) -> Sequence[bytes]:
        return [bytes(ngram) for ngram
                in itertools.product(*itertools.repeat(ASCII_RANGE, ngram_size))]

    contents = open(filename, 'rb').read()
    return [count_ngrams(sliding_window(contents, ngram_size), ngram_range(ngram_size))
            for ngram_size in range(1, max_ngram_size + 1)]


def dump_analysis(analysis: Histogram) -> None:
    def get_value(item):
        key, val = item
        return val

    for key, val in sorted(analysis.items(), key=get_value, reverse=True):
        print(f"{repr(key.decode('ascii')):>16s}: {val:.6f}")
    print()


def chi_score(plaintext: bytes, base_histogram: Histogram, group_size: int) -> float:
    def expected_freq(val: bytes):
        BAD_NGRAM_FREQ = 1e-6
        return base_histogram.get(val, BAD_NGRAM_FREQ)

    histogram = counter.Counter(sliding_window(plaintext, group_size))
    num_chars = len(plaintext) - group_size + 1
    return sum((freq / num_chars - expected_freq(val))**2 / expected_freq(val)
               for val, freq in histogram.items())


def score_solution(plaintext: bytes, analysis: Sequence[Histogram]) -> float:
    return sum(chi_score(plaintext, histogram, index)
               for index, histogram in enumerate(analysis))


program, filename, max_ngram_size_str = sys.argv
max_ngram_size = int(max_ngram_size_str)

histograms = analyze(filename, max_ngram_size)
for histogram in histograms:
    dump_analysis(histogram)
